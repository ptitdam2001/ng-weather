{"version":3,"sources":["ptitdam-ng-openweathermap.js"],"names":["angular","module","directive","restrict","template","replace","transclude","scope","longitud","latitud","cityName","lang","controller","link","$element","iattrs","ctrl","isDefined","mode","showMode","widgetCtrl","openWeatherMapService","this","weatherData","showContent","onError","error","wind","speedkmh","onSuccess","data","speed","getWeatherInfo","$inject","service","$http","makeRequest","parameters","queryString","city","id","Error","units","cnt","parseInt","executeQuery","uri","successCallback","errorCallback","method","url","success","status","headers","config","basePath","weatherPath","forecastPath","getForecastEvery3hours","getForecastEveryDays","nbDays"],"mappings":"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","file":"ptitdam-ng-openweathermap.min.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular.module('ptitdam-ng-openweathermap', []);\n\n})();\n\n(function() {\n\t'use strict';\n\n\tangular\n\t\t.module('ptitdam-ng-openweathermap')\n\t\t.directive('widgetWeather', function() {\n\t\t\treturn {\n\t\t\t\trestrict: 'E',\n\t\t\t\ttemplate: '<div><div class=loader ng-hide={{!showContent}}><div class=loading-circle></div><div class=loading-circle></div><div class=loading-circle></div><div class=loading-circle></div><div class=loading-circle></div><div class=loading-circle></div><div class=loading-circle></div><div class=loading-circle></div></div><section class=weather-widget ng-hide=\"{{showMode == \\'light\\'}}\"><div class=\"row header\"><div class=\"col-sm-8 col-xs-8 text-left\"><h5>{{weatherData.name}}</h5></div><div class=\"col-sm-4 col-xs-4 text-right\">{{weatherData.main.temp | number : 0}}<object type=image/svg+xml data=/assets/svg/Degrees-celcius.svg class=\"wicons small\"></object></div></div><div class=row ng-repeat=\"weather in weatherData.weather\"><div class=\"col-sm-6 col-xs-6 text-center\"><object type=image/svg+xml data=/assets/svg/{{weather.icon}}.svg class=\"wicons large\"><div>{{weather.description}}</div></object></div><div class=\"col-sm-6 col-xs-6\"><ul class=text-right><li>{{weatherData.wind.speedkmh | number : 0}} km/h <span class=fontawesome-leaf></span></li><li>{{weatherData.main.humidity | number : 0}}% <span class=fontawesome-tint></span></li><li>{{weatherData.clouds.all | number : 0}}% <span class=fontawesome-umbrella></span></li></ul></div></div></section><section class=\"weather-widget small-size\" ng-show=\"{{showMode == \\'light\\'}}\"><div class=row><div class=\"col-sm-12 col-xs-12 text-center\">{{weatherData.name}}</div></div><div class=row><div class=\"col-sm-6 col-xs-6 text-left\" ng-repeat=\"weather in weatherData.weather\"><object type=image/svg+xml data=/assets/svg/{{weather.icon}}.svg class=\"wicons medium\"></object></div><div class=\"col-sm-6 col-xs-6 text-right small-desc-part\">{{weatherData.main.temp | number : 0}}<object type=image/svg+xml data=/assets/svg/Degrees-celcius.svg class=\"wicons small\"></object></div></div></section></div>',\n\t\t\t\treplace: true,\n\t\t\t\ttransclude: false,\n\t\t\t\tscope: {\n\t\t\t\t\tlongitud: '@cityLon',\n\t\t\t\t\tlatitud: '@cityLat',\n\t\t\t\t\tcityName: '@city',\n\t\t\t\t\tlang: '@lang'\n\t\t\t\t},\n\t\t\t\tcontroller: 'widgetCtrl',\n\t\t\t\tlink: function(scope, $element, iattrs, ctrl) {\n\t\t\t\t\t//define mode\n\t\t\t\t\tif (angular.isDefined(iattrs.mode) && (iattrs.mode == 'light' || iattrs.mode == 'lite')) {\n\t\t\t\t\t\tscope.showMode = 'light';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscope.showMode = 'complete';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n})();\n(function () {\n    'use strict';\n\n    angular\n        .module('ptitdam-ng-openweathermap')\n        .controller('widgetCtrl', widgetCtrl);\n\n    /** ng-inject */\n    function widgetCtrl(openWeatherMapService) {\n        var ctrl = this;\n\n        ctrl.weatherData = {};\n        ctrl.showContent = false;\n\n\n        var onError = function (error) {\n            ctrl.weatherData.wind = {};\n            ctrl.weatherData.wind.speedkmh = 0;\n        };\n\n        var onSuccess = function (data) {\n            // this callback will be called asynchronously\n            // when the response is available\n            ctrl.weatherData = data;\n            //change mps to kmh\n            ctrl.weatherData.wind.speedkmh = ctrl.weatherData.wind.speed * 3.6;\n            ctrl.showContent = true;\n        };\n\n        //make openweather uri in function parameters\n        openWeatherMapService.getWeatherInfo(ctrl.cityName, ctrl.longitud, ctrl.latitud, ctrl.lang, onSuccess, onError);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('ptitdam-ng-openweathermap')\n        .service(\"openWeatherMapService\", ['$http', function($http) {\n\n            var basePath = 'http://api.openweathermap.org/data/2.5/';\n            var weatherPath = basePath + 'weather';\n            var forecastPath = basePath + 'forecast';\n\n            function makeRequest(parameters) {\n                var queryString = '';\n\n                //coordinates\n                if (angular.isDefined(parameters.city) && parameters.city != null) {\n                    queryString += \"q=\" + parameters.city;\n                } else if (angular.isDefined(parameters.longitud) && angular.isDefined(parameters.latitud) && parameters.longitud != null && parameters.latitud != null) {\n                    queryString += \"lat=\" + parameters.latitud + '&lon=' + parameters.longitud;\n                } else if (angular.isDefined(parameters.id) && parameters.id != null) {\n                    queryString += 'id=' + parameters.id;\n                } else {\n                    new Error(\"openWeatherMapService : location is not defined\");\n                }\n\n                //lang\n                if (angular.isDefined(parameters.lang)) {\n                    queryString += '&lang='+ parameters.lang;\n                }\n\n                //metrics\n                if (angular.isDefined(parameters.units)) {\n                    queryString += '&units=' + parameters.units;\n                } else {\n                    queryString += '&units=metric';\n                }\n\n                //nb days to forecast\n                if (angular.isDefined(parameters.cnt) && parseInt(parameters.cnt) < 17) {\n                    queryString += '&cnt=' + parameters.cnt;\n                }\n\n                return queryString;\n            }\n\n            function executeQuery(uri, successCallback, errorCallback) {\n                $http({\n                    method: 'GET',\n                    url: uri\n                }).\n                    success(function(data, status, headers, config) {\n                        if (typeof successCallback == 'function') {\n                            successCallback(data)\n                        }\n                    }).\n                    error(function(data, status, headers, config) {\n                        // called asynchronously if an error occurs\n                        // or server returns response with an error status.\n                        if (typeof errorCallback == 'function') {\n                            errorCallback(data)\n                        }\n                    });\n            }\n            this.getWeatherInfo = function(city, longitud, latitud, lang, successCallback, errorCallback) {\n                //make openweather uri in function parameters\n                var queryString = makeRequest({\n                    'city' : angular.isDefined(city) ? city : null,\n                    'longitud' : angular.isDefined(longitud) ? longitud : null,\n                    'latitud' : angular.isDefined(latitud) ? latitud : null,\n                    'lang' : angular.isDefined(lang) ? lang : 'en'\n                });\n\n                executeQuery(weatherPath + '?' + queryString, successCallback, errorCallback);\n            };\n\n            this.getForecastEvery3hours = function(city, longitud, latitud, lang, successCallback, errorCallback) {\n                var queryString = makeRequest({\n                    'city' : angular.isDefined(city) ? city : null,\n                    'longitud' : angular.isDefined(longitud) ? longitud : null,\n                    'latitud' : angular.isDefined(latitud) ? latitud : null,\n                    'lang' : angular.isDefined(lang) ? lang : 'en'\n                });\n\n                executeQuery(forecastPath + '?' + queryString, successCallback, errorCallback);\n            };\n\n            this.getForecastEveryDays = function(city, longitud, latitud, lang, nbDays, successCallback, errorCallback) {\n                //make openweather uri in function parameters\n                var queryString = makeRequest({\n                    'city' : angular.isDefined(city) ? city : null,\n                    'longitud' : angular.isDefined(longitud) ? longitud : null,\n                    'latitud' : angular.isDefined(latitud) ? latitud : null,\n                    'lang' : angular.isDefined(lang) ? lang : 'en',\n                    'cnt' : nbDays\n                });\n\n                executeQuery(forecastPath + '/daily?' + queryString, successCallback, errorCallback);\n            };\n\n        }\n        ]);\n\n})();"],"sourceRoot":"/source/"}